#include <testudo/testudo_lc> // default lower-case style
#include "Value.h"
#include "Stack.h"
#include "Parser.h"

define_top_test_node("pile", // parent full name
                     (stack, // test name
                      "stack")); // title

define_test(stack, // parent
            "pushing and popping") { // title
  declare(using namespace std);
  declare(Stack stack);
  check(stack.length())_equal(0);
  perform(stack.push(make_shared<IntValue>(0)));
  check(stack.length())_equal(1);
  perform(stack.push(make_shared<IntValue>(0)));
  check(stack.length())_equal(2);
  perform(stack.pop());
  check(stack.length())_equal(1);
  perform(stack.pop());
  check(stack.length())_equal(0);
}

define_test(stack, // parent
            "pushing and popping values") { // title
  declare(using namespace std);
  declare(Stack stack);
  perform(stack.push(make_shared<IntValue>(33)));
  perform(stack.push(make_shared<StringValue>("hey")));
  check(dynamic_pointer_cast<StringValue>(stack.pop())->get())_equal("hey");
  check(dynamic_pointer_cast<IntValue>(stack.pop())->get())_equal(33);
}

define_test(stack, // parent
            "popping an empty stack") { // title
  declare(using namespace std);
  declare(Stack stack);
  check_try(stack.pop())_catch();
}


define_test(stack,
            "storing and retrieving a variable")
{
    declare(using namespace std);
    declare(Stack stack);
    perform(stack = Parser::parse("4 \"var store var"));
    check(dynamic_pointer_cast<IntValue>(stack.pop())->get())_equal(4);
    check(stack.length())_equal(0);
}

define_test(stack,
            "storing and retrieving functions")
{
    declare(using namespace std);
    declare(Stack stack);
    perform(stack = Parser::parse("[ 5 + ] \"func store 4 func"));
    check(dynamic_pointer_cast<IntValue>(stack.pop())->get())_equal(9);
    check(stack.length())_equal(0);
}

define_test(stack,
            "storing and retrieving and evaluating functions")
{
    declare(using namespace std);
    declare(Stack stack);
    perform(stack = Parser::parse("[ 5 '+ ] \"func2 store 4 func2 eval"));
    check(dynamic_pointer_cast<IntValue>(stack.pop())->get())_equal(9);
    check(stack.length())_equal(0);
}

define_test(stack,
         "evaluating a function")
{
    declare(using namespace std);
    declare(Stack stack);
    perform(stack = Parser::parse("7 [ 3 '+ ] eval eval"));
    check(dynamic_pointer_cast<IntValue>(stack.pop())->get())_equal(10);
    check(stack.length())_equal(0);
}

define_test(stack,
            "evaluating a function in a variable")
{
    declare(using namespace std);
    declare(Stack stack);
    perform(stack = Parser::parse("[ 3 '+ ] \"func3 store 7 'func3 eval eval"));
    check(dynamic_pointer_cast<IntValue>(stack.pop())->get())_equal(10);
    check(stack.length())_equal(0);
}

define_test(stack,
            "looping a function")
{
    declare(using namespace std);
    declare(Stack stack);
    perform(stack = Parser::parse("1 [ 10 * 1 + ] 3 for"));
    check(dynamic_pointer_cast<IntValue>(stack.pop())->get())_equal(1111);
    check(stack.length())_equal(0);
}

define_test(stack,
            "looping a 'primitive' operation")
{
    declare(using namespace std);
    declare(Stack stack);
    perform(stack = Parser::parse("1 10 1 0 '+ 3 for"));
    check(dynamic_pointer_cast<IntValue>(stack.pop())->get())_equal(12);
    check(stack.length())_equal(0);
}
