#include <testudo/testudo_lc>
#include "../Stack.h"
#include "../Parser.h"
#include "../testudo.dcl"

define_top_test_node("functions", (functions,
                     "tests around FunctionValue and operations using them"));

template<typename T>
std::list<std::shared_ptr<T>> stack_to_list(Stack s)
{
    std::list<std::shared_ptr<T>> l;
    while (s.length() > 0)
        l.push_front(s.pop()->as<T>());
    return l;
}

define_test(functions, "if(true)")
{
    declare(Stack stack = Parser::parse("true [ 4 ] if"));
    check(stack.pop()->as<IntValue>()->get())_equal(4);
    check_empty_stack(stack);
}

define_test(functions, "if(false)")
{
    declare(Stack stack = Parser::parse("false [ 4 ] if"));
    check_empty_stack(stack);
}

define_test(functions, "if(true) else")
{
    declare(Stack stack = Parser::parse("true [ 4 ] [ 5 ] if_else"));
    check(stack.pop()->as<IntValue>()->get())_equal(4);
    check_empty_stack(stack);
}

define_test(functions, "if(false) else")
{
    declare(Stack stack = Parser::parse("false [ 4 ] [ 5 ] if_else"));
    check(stack.pop()->as<IntValue>()->get())_equal(5);
    check_empty_stack(stack);
}

define_test(functions, "nesting functions")
{
    declare(Stack stack = Parser::parse("[ [ 4 ] ] eval eval"));
}

define_test(functions, "== true")
{
    declare(Stack stack = Parser::parse("4 4 =="));
    check(stack.pop()->as<BoolValue>()->get())_true;
    check_empty_stack(stack);
}

define_test(functions, "== false")
{
    declare(Stack stack = Parser::parse("4 5 =="));
    check(stack.pop()->as<BoolValue>()->get())_false;
    check_empty_stack(stack);
}

define_test(functions, "!= true")
{
    declare(Stack stack = Parser::parse("4 5 !="));
    check(stack.pop()->as<BoolValue>()->get())_true;
    check_empty_stack(stack);
}

define_test(functions, "!= false")
{
    declare(Stack stack = Parser::parse("4 4 !="));
    check(stack.pop()->as<BoolValue>()->get())_false;
    check_empty_stack(stack);
}

define_test(functions, "> true")
{
    declare(Stack stack = Parser::parse("5 4 >"));
    check(stack.pop()->as<BoolValue>()->get())_true;
    check_empty_stack(stack);
}

define_test(functions, "> eq false")
{
    declare(Stack stack = Parser::parse("4 4 >"));
    check(stack.pop()->as<BoolValue>()->get())_false;
    check_empty_stack(stack);
}

define_test(functions, "> false")
{
    declare(Stack stack = Parser::parse("4 5 >"));
    check(stack.pop()->as<BoolValue>()->get())_false;
    check_empty_stack(stack);
}

define_test(functions, "< true")
{
    declare(Stack stack = Parser::parse("4 5 <"));
    check(stack.pop()->as<BoolValue>()->get())_true;
    check_empty_stack(stack);
}

define_test(functions, "< eq false")
{
    declare(Stack stack = Parser::parse("4 4 <"));
    check(stack.pop()->as<BoolValue>()->get())_false;
    check_empty_stack(stack);
}

define_test(functions, "< false")
{
    declare(Stack stack = Parser::parse("5 4 <"));
    check(stack.pop()->as<BoolValue>()->get())_false;
    check_empty_stack(stack);
}

define_test(functions, ">= true")
{
    declare(Stack stack = Parser::parse("5 4 >="));
    check(stack.pop()->as<BoolValue>()->get())_true;
    check_empty_stack(stack);
}

define_test(functions, ">= eq true")
{
    declare(Stack stack = Parser::parse("4 4 >="));
    check(stack.pop()->as<BoolValue>()->get())_true;
    check_empty_stack(stack);
}

define_test(functions, ">= false")
{
    declare(Stack stack = Parser::parse("4 5 >="));
    check(stack.pop()->as<BoolValue>()->get())_false;
    check_empty_stack(stack);
}

define_test(functions, "<= true")
{
    declare(Stack stack = Parser::parse("4 5 <="));
    check(stack.pop()->as<BoolValue>()->get())_true;
    check_empty_stack(stack);
}

define_test(functions, "<= eq true")
{
    declare(Stack stack = Parser::parse("4 4 <="));
    check(stack.pop()->as<BoolValue>()->get())_true;
    check_empty_stack(stack);
}

define_test(functions, "<= false")
{
    declare(Stack stack = Parser::parse("5 4 <="));
    check(stack.pop()->as<BoolValue>()->get())_false;
    check_empty_stack(stack);
}

define_test(functions, "while")
{
    declare(Stack stack = Parser::parse("0 \"num\" store [ num 10 < ] [ num 1 + \"num\" store 1 ] while"));
    declare(auto l = stack_to_list<IntValue>(stack));
    check(l.size())_equal(10);

    with_data(s, l)
        check(s->get())_equal(1);
}

define_test(functions, "recursive function")
{
    declare(Stack stack = Parser::parse("[ [ 10 num > ] [ num 1 + \"num store func ] if ] \"func store 0 \"num store func num"));
    check(stack.pop()->as<IntValue>()->get())_equal(10);
    check_empty_stack(stack);
}