<testudo>
  <test location="" name="/" title="" n_failed="0" n_total="107" n_errors="0" success="true">
    <test location="" name="functions" title="" n_failed="0" n_total="52" n_errors="0" success="true">
      <test location="" name="functions.functions" title="tests around FunctionValue and operations using them" n_failed="0" n_total="52" n_errors="0" success="true">
        <test location="" name="functions.functions.if(true)" title="if(true)" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;true [ 4 ] if&quot;)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="4">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="4">4</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.if(false)" title="if(false)" n_failed="0" n_total="1" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;false [ 4 ] if&quot;)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.if(true) else" title="if(true) else" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;true [ 4 ] [ 5 ] if_else&quot;)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="4">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="4">4</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.if(false) else" title="if(false) else" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;false [ 4 ] [ 5 ] if_else&quot;)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="5">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="5">5</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.nesting functions" title="nesting functions" n_failed="0" n_total="0" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;[ [ 4 ] ] eval eval&quot;)</declare>
        </test>
        <test location="" name="functions.functions.== true" title="== true" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 4 ==&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.== false" title="== false" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 5 ==&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.!= true" title="!= true" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 5 !=&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.!= false" title="!= false" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 4 !=&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&gt; true" title="&gt; true" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;5 4 &gt;&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&gt; eq false" title="&gt; eq false" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 4 &gt;&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&gt; false" title="&gt; false" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 5 &gt;&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&lt; true" title="&lt; true" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 5 &lt;&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&lt; eq false" title="&lt; eq false" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 4 &lt;&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&lt; false" title="&lt; false" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;5 4 &lt;&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&gt;= true" title="&gt;= true" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;5 4 &gt;=&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&gt;= eq true" title="&gt;= eq true" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 4 &gt;=&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&gt;= false" title="&gt;= false" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 5 &gt;=&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&lt;= true" title="&lt;= true" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 5 &lt;=&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&lt;= eq true" title="&lt;= eq true" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 4 &lt;=&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.&lt;= false" title="&lt;= false" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;5 4 &lt;=&quot;)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="functions.functions.while" title="while" n_failed="0" n_total="11" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;0 \&quot;num\&quot; store [ num 10 &lt; ] [ num 1 + \&quot;num\&quot; store 1 ] while&quot;)</declare>
          <declare location="" brief_location="">auto l = stack_to_list&lt;IntValue&gt;(stack)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="10">l.size()</expression1>
            <expression2 value="10">10</expression2>
          </check_equal>
          <with location="" brief_location="" var="s" container_first="l" container_rest="" summary="s in l" n_failed="0" n_total="10" n_errors="0" success="true">
            <check_equal location="" brief_location="" success="with" prefix="">
              <expression1 value="">s-&gt;get()</expression1>
              <expression2 value="">1</expression2>
            </check_equal>
          </with>
        </test>
        <test location="" name="functions.functions.recursive function" title="recursive function" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;[ [ 10 num &gt; ] [ num 1 + \&quot;num store func ] if ] \&quot;func store 0 \&quot;num store func num&quot;)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="10">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="10">10</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
      </test>
    </test>
    <test location="" name="operations" title="" n_failed="0" n_total="23" n_errors="0" success="true">
      <test location="" name="operations.operations" title="operations tests" n_failed="0" n_total="23" n_errors="0" success="true">
        <test location="" name="operations.operations.adding" title="adding" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <declare location="" brief_location="">stack = Parser::parse(&quot;4 5 +&quot;)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="9">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="9">9</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="operations.operations.subtracting" title="subtracting" n_failed="0" n_total="3" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;5 4 - 4 5 -&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="-1">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="-1">-1</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="1">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="1">1</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="operations.operations.multiplying" title="multiplying" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;5 -4 *&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="-20">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="-20">-20</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="operations.operations.swapping" title="swapping" n_failed="0" n_total="4" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;\&quot;hey 4 swap true swap&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="hey">stack.pop()-&gt;as&lt;StringValue&gt;()-&gt;get()</expression1>
            <expression2 value="hey">&quot;hey&quot;</expression2>
          </check_equal>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stack.pop()-&gt;as&lt;BoolValue&gt;()-&gt;get()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="4">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="4">4</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="operations.operations.popping" title="popping" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;4 5 6 pop pop&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="4">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="4">4</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="operations.operations.concatenating" title="concatenating" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;\&quot;123 \&quot;456 cat&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="123456">stack.pop()-&gt;as&lt;StringValue&gt;()-&gt;get()</expression1>
            <expression2 value="123456">&quot;123456&quot;</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="operations.operations.storing and retrieving a variable" title="storing and retrieving a variable" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;4 \&quot;var store var&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="4">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="4">4</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="operations.operations.storing and retrieving functions" title="storing and retrieving functions" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;[ 5 + ] \&quot;func store 4 func&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="9">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="9">9</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="operations.operations.looping a function" title="looping a function" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;1 [ 10 * 1 + ] 3 for&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="1111">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="1111">1111</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="operations.operations.not evaluating a function inside another" title="not evaluating a function inside another" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;[ 3 + ] \&quot;func store [ 2 [ func ] ] eval eval&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="5">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="5">5</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
      </test>
    </test>
    <test location="" name="parse_stream" title="" n_failed="0" n_total="15" n_errors="0" success="true">
      <test location="" name="parse_stream.parse_stream" title="parse_stream tests" n_failed="0" n_total="15" n_errors="0" success="true">
        <test location="" name="parse_stream.parse_stream.peeking and getting strings" title="peeking and getting strings" n_failed="0" n_total="9" n_errors="0" success="true">
          <declare location="" brief_location="">using namespace std</declare>
          <declare location="" brief_location="">istringstream iss(&quot;hey ho&quot;)</declare>
          <declare location="" brief_location="">ParserStream stream(iss)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stream.is_end_of_stream()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="hey">stream.peek_token()</expression1>
            <expression2 value="hey">&quot;hey&quot;</expression2>
          </check_equal>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stream.is_end_of_stream()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="hey">stream.get_token()</expression1>
            <expression2 value="hey">&quot;hey&quot;</expression2>
          </check_equal>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stream.is_end_of_stream()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="ho">stream.peek_token()</expression1>
            <expression2 value="ho">&quot;ho&quot;</expression2>
          </check_equal>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stream.is_end_of_stream()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="ho">stream.get_token()</expression1>
            <expression2 value="ho">&quot;ho&quot;</expression2>
          </check_equal>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stream.is_end_of_stream()</expression1>
          </check_true>
        </test>
        <test location="" name="parse_stream.parse_stream.empty stream" title="empty stream" n_failed="0" n_total="1" n_errors="0" success="true">
          <declare location="" brief_location="">using namespace std</declare>
          <declare location="" brief_location="">istringstream iss(&quot;&quot;)</declare>
          <declare location="" brief_location="">ParserStream stream(iss)</declare>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stream.is_end_of_stream()</expression1>
          </check_true>
        </test>
        <test location="" name="parse_stream.parse_stream.stream with 1 element" title="stream with 1 element" n_failed="0" n_total="5" n_errors="0" success="true">
          <declare location="" brief_location="">using namespace std</declare>
          <declare location="" brief_location="">istringstream iss(&quot;hey&quot;)</declare>
          <declare location="" brief_location="">ParserStream stream(iss)</declare>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stream.is_end_of_stream()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="hey">stream.peek_token()</expression1>
            <expression2 value="hey">&quot;hey&quot;</expression2>
          </check_equal>
          <check_true location="" brief_location="" success="true" prefix="nay">
            <expression1>stream.is_end_of_stream()</expression1>
          </check_true>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="hey">stream.get_token()</expression1>
            <expression2 value="hey">&quot;hey&quot;</expression2>
          </check_equal>
          <check_true location="" brief_location="" success="true" prefix="">
            <expression1>stream.is_end_of_stream()</expression1>
          </check_true>
        </test>
      </test>
    </test>
    <test location="" name="pile" title="" n_failed="0" n_total="11" n_errors="0" success="true">
      <test location="" name="pile.stack" title="stack" n_failed="0" n_total="11" n_errors="0" success="true">
        <test location="" name="pile.stack.pushing and popping" title="pushing and popping" n_failed="0" n_total="5" n_errors="0" success="true">
          <declare location="" brief_location="">using namespace std</declare>
          <declare location="" brief_location="">Stack stack</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
          <perform location="" brief_location="">stack.push(make_shared&lt;IntValue&gt;(0))</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="1">stack.length()</expression1>
            <expression2 value="1">1</expression2>
          </check_equal>
          <perform location="" brief_location="">stack.push(make_shared&lt;IntValue&gt;(0))</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="2">stack.length()</expression1>
            <expression2 value="2">2</expression2>
          </check_equal>
          <perform location="" brief_location="">stack.pop()</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="1">stack.length()</expression1>
            <expression2 value="1">1</expression2>
          </check_equal>
          <perform location="" brief_location="">stack.pop()</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="pile.stack.pushing and popping values" title="pushing and popping values" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">using namespace std</declare>
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack.push(make_shared&lt;IntValue&gt;(33))</perform>
          <perform location="" brief_location="">stack.push(make_shared&lt;StringValue&gt;(&quot;hey&quot;))</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="hey">stack.pop()-&gt;as&lt;StringValue&gt;()-&gt;get()</expression1>
            <expression2 value="hey">&quot;hey&quot;</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="33">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="33">33</expression2>
          </check_equal>
        </test>
        <test location="" name="pile.stack.popping an empty stack" title="popping an empty stack" n_failed="0" n_total="1" n_errors="0" success="true">
          <declare location="" brief_location="">using namespace std</declare>
          <declare location="" brief_location="">Stack stack</declare>
          <try location="" brief_location="">stack.pop()</try>
          <catch location="" brief_location="" exception_type="" success="true">Stack is empty</catch>
        </test>
        <test location="" name="pile.stack.pushing strings" title="pushing strings" n_failed="0" n_total="3" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack</declare>
          <perform location="" brief_location="">stack = Parser::parse(&quot;\&quot;hey \&quot;ho\&quot;&quot;)</perform>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="ho">stack.pop()-&gt;as&lt;StringValue&gt;()-&gt;get()</expression1>
            <expression2 value="ho">&quot;ho&quot;</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="hey">stack.pop()-&gt;as&lt;StringValue&gt;()-&gt;get()</expression1>
            <expression2 value="hey">&quot;hey&quot;</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
      </test>
    </test>
    <test location="" name="variables" title="" n_failed="0" n_total="6" n_errors="0" success="true">
      <test location="" name="variables.variables" title="variable tests" n_failed="0" n_total="6" n_errors="0" success="true">
        <test location="" name="variables.variables.evaluating functions with variables" title="evaluating functions with variables" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 \&quot;var store [ var ] eval&quot;)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="4">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="4">4</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="variables.variables.changing name variable and evaluating" title="changing name variable and evaluating" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot;4 \&quot;var store [ var ] \&quot;hoi \&quot;var store eval&quot;)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="hoi">stack.pop()-&gt;as&lt;StringValue&gt;()-&gt;get()</expression1>
            <expression2 value="hoi">&quot;hoi&quot;</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
        <test location="" name="variables.variables.changing variable inside function" title="changing variable inside function" n_failed="0" n_total="2" n_errors="0" success="true">
          <declare location="" brief_location="">Stack stack = Parser::parse(&quot; [ 5 \&quot;var store ] eval var&quot;)</declare>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="5">stack.pop()-&gt;as&lt;IntValue&gt;()-&gt;get()</expression1>
            <expression2 value="5">5</expression2>
          </check_equal>
          <check_equal location="" brief_location="" success="true" prefix="">
            <expression1 value="0">stack.length()</expression1>
            <expression2 value="0">0</expression2>
          </check_equal>
        </test>
      </test>
    </test>
  </test>
</testudo>
